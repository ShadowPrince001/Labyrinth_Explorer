<!-- LEGACY FILE: Not used by web_app.py. Kept for reference only. Use static/index.html instead. -->
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Labyrinth Adventure - Web</title>
    <style>
        :root { --panel-height: 100vh; --accent: #2ecc71; }
        html, body { height: 100%; margin: 0 }
        body {
            background: #000;
            color: #ddd;
            font-family: Inter, Roboto, Arial, Helvetica, sans-serif;
            display: flex;
            flex-direction: column
        }
        .game-panel {
            height: var(--panel-height);
            padding: 18px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column
        }
        #output {
            flex: 1 1 auto;
            color: #e6e6e6;
            padding: 8px;
            overflow: auto;
            white-space: pre-wrap;
            font-family: Consolas, 'Courier New', monospace
        }
        .options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 8px
        }
        .option-btn {
            background: #2ecc71;
            color: #042;
            padding: 10px 12px;
            border-radius: 8px;
            border: none;
            cursor: pointer
        }
        .text-input {
            padding: 8px;
            border-radius: 6px;
            border: 1px solid #222;
            background: #111;
            color: #fff
        }
    </style>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script>
        (function() {
            function loadScript(src, onload, onerror) {
                var s = document.createElement('script');
                s.src = src;
                s.async = false;
                s.onload = onload;
                s.onerror = onerror;
                document.head.appendChild(s);
            }

            function finish() {
                window.__socketio_loader_done = true;
                if (typeof window.initApp === 'function') {
                    try { window.initApp(); } catch (e) { console.error('initApp error', e); }
                }
            }

            loadScript('/static/socket.io.js', function() {
                console.log('Loaded socket.io from /static/socket.io.js');
                finish();
            }, function() {
                loadScript('/socket.io/socket.io.js', function() {
                    console.log('Loaded socket.io from /socket.io/socket.io.js');
                    finish();
                }, function() {
                    console.warn('socket.io client not available - using poll fallback');
                    finish();
                });
            });
        })();
    </script>
</head>
<body>
    <div class="game-panel">
        <div id="root"></div>
    </div>
    <script type="text/babel">
        window.initApp = (function() {
            const { useState, useEffect, useRef } = React;
            
            function App() {
                const [displayedText, setDisplayedText] = useState('');
                const [options, setOptions] = useState([]);
                const [nameMode, setNameMode] = useState(false);
                const [mode, setMode] = useState('unknown');
                const [connected, setConnected] = useState(false);
                const [lastError, setLastError] = useState('');
                const [lastActivity, setLastActivity] = useState('');
                const [freeInput, setFreeInput] = useState(false);
                const socketRef = useRef(null);
                const lastMenuSignatureRef = useRef('');

                function appendText(text) {
                    // Filter out only number selections, keep everything else
                    const lines = text.split('\n').filter(line => {
                        return !/^>\s*\d+\s*$/.test(line);
                    });
                    
                    if (lines.length > 0) {
                        setDisplayedText(prev => prev + lines.join('\n') + '\n');
                        const el = document.getElementById('output');
                        if (el) el.scrollTop = el.scrollHeight;
                    }
                    
                    // Check for menus in the text
                    checkForMenus(text);
                }

                function parseOptions(text) {
                    const out = [];
                    const lines = text.split('\n');
                    for (const l of lines) {
                        const m = l.match(/^\s*(\d+)\)\s*(.*)$/);
                        if (m) out.push({ num: m[1], label: m[2].trim() });
                    }
                    return out;
                }

                function checkForMenus(text) {
                    // Check for name input first
                    const isNameInput = /enter your name|what is your name/i.test(text);
                    if (isNameInput) {
                        setNameMode(true);
                        setFreeInput(true);
                        setOptions([]);
                        lastMenuSignatureRef.current = '';
                        return;
                    }

                    // Look for menu options in the text
                    const parsed = parseOptions(text);
                    if (parsed.length > 0) {
                        const sig = parsed.map(p => p.num + '|' + p.label).join('||');
                        if (sig !== lastMenuSignatureRef.current) {
                            setOptions(parsed);
                            lastMenuSignatureRef.current = sig;
                            setNameMode(false);
                            setFreeInput(false);
                        }
                    }
                }

                useEffect(() => {
                    let s = null;
                    let pollId = null;

                    try {
                        if (typeof io === 'function') {
                            setMode('socket');
                            setFreeInput(false);
                            s = io();
                            socketRef.current = s;

                            s.on('connect', () => {
                                setConnected(true);
                                setLastActivity('connected');
                                try { s.emit('start'); } catch (e) { }
                            });

                            s.on('disconnect', () => {
                                setConnected(false);
                                setLastActivity('disconnected');
                            });

                            s.on('connect_error', (err) => setLastError(String(err)));
                            s.on('error', (err) => setLastError(String(err)));

                            s.on('output', (data) => {
                                if (data && data.text) {
                                    appendText(data.text);
                                    setLastActivity('received output');
                                }
                            });
                        } else {
                            throw new Error('no io');
                        }
                    } catch (e) {
                        setMode('poll');
                        setLastError('socket.io not available, using poll fallback');
                        setFreeInput(true);
                        
                        pollId = setInterval(async () => {
                            try {
                                const r = await fetch('/poll');
                                const text = await r.text();
                                let j = null;
                                try {
                                    j = JSON.parse(text);
                                } catch (e) {
                                    setLastError('poll returned non-JSON');
                                    appendText('\n[poll raw] ' + text + '\n');
                                    return;
                                }
                                if (j && j.output && j.output.length) {
                                    for (const chunk of j.output) {
                                        appendText(chunk);
                                        const wantsName = /enter your name|what is your name/i.test(chunk);
                                        setNameMode(!!wantsName);
                                    }
                                    setLastActivity('polled output');
                                }
                            } catch (err) {
                                setLastError(String(err));
                            }
                        }, 300);

                        (async () => {
                            await fetch('/start', { method: 'POST' }).catch(() => { });
                        })();
                    }

                    return () => {
                        if (s && s.disconnect) s.disconnect();
                        if (pollId) clearInterval(pollId);
                    };
                }, []);

                function startGame() {
                    if (mode === 'socket' && socketRef.current) {
                        try {
                            socketRef.current.emit('start');
                            setLastActivity('start emitted');
                        } catch (e) {
                            setLastError(String(e));
                        }
                    } else {
                        fetch('/start', { method: 'POST' })
                            .then(() => setLastActivity('start posted'))
                            .catch(e => setLastError(String(e)));
                    }
                }

                async function sendInput(v) {
                    try {
                        // Don't show number choices in output
                        if (!/^\d+$/.test(v)) {
                            appendText('\n> ' + v + '\n');
                        }

                        if (socketRef.current && mode === 'socket') {
                            socketRef.current.emit('input', { text: String(v) });
                        } else {
                            await fetch('/send', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ input: String(v) })
                            });
                        }
                        
                        // Clear current menu after sending input
                        setOptions([]);
                        lastMenuSignatureRef.current = '';
                        setLastActivity('sent input');
                    } catch (e) {
                        console.error(e);
                        setLastError(String(e));
                    }
                }

                return (
                    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                        <div style={{ display: 'flex', gap: 12, alignItems: 'center', marginBottom: 8 }}>
                            <div style={{ color: '#0f0' }}><strong>Mode:</strong> {mode}</div>
                            <div style={{ color: connected ? '#7f7' : '#f77' }}>
                                <strong>Connected:</strong> {connected ? 'yes' : 'no'}
                            </div>
                            <div style={{ color: '#ccc' }}><strong>Last:</strong> {lastActivity}</div>
                            <div style={{ color: '#f88' }}><strong>Error:</strong> {lastError}</div>
                            <label style={{ marginLeft: 12, display: 'flex', alignItems: 'center', gap: 8 }}>
                                <input
                                    type="checkbox"
                                    checked={freeInput}
                                    onChange={e => setFreeInput(e.target.checked)}
                                />
                                <span style={{ fontSize: 12 }}>Free input</span>
                            </label>
                            <button
                                style={{ marginLeft: 'auto' }}
                                className="option-btn"
                                onClick={startGame}
                            >
                                Start Game
                            </button>
                        </div>
                        
                        <div id="output" style={{ flex: '1 1 auto' }}>
                            {displayedText.split('\n').map((ln, i) => (
                                <div key={i}>{ln}</div>
                            ))}
                        </div>
                        
                        <div className="options">
                            {mode === 'socket' && options && options.length > 0 ? options.map((o, i) => (
                                <button
                                    key={i}
                                    className="option-btn"
                                    onClick={() => sendInput(o.num)}
                                >
                                    {o.label}
                                </button>
                            )) : null}
                        </div>
                        
                        <div style={{ marginTop: 8 }}>
                            {(nameMode || freeInput) && (
                                <input
                                    className="text-input"
                                    placeholder={nameMode ? 'Enter name...' : 'Type response'}
                                    onKeyDown={e => {
                                        if (e.key === 'Enter') {
                                            sendInput(e.target.value);
                                            e.target.value = '';
                                        }
                                    }}
                                />
                            )}
                        </div>
                    </div>
                );
            }

            ReactDOM.createRoot(document.getElementById('root')).render(<App />);
        });

        if (window.__socketio_loader_done) {
            try {
                window.initApp();
            } catch (e) {
                console.error('initApp failed', e);
            }
        }
    </script>
</body>
</html>