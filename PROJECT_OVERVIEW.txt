Project overview - Labyrinth Adventure

Purpose
-------
A compact text-based RPG with a web UI frontend. The web app uses a structured, event-driven engine (no stdout capture) and streams JSON events over Socket.IO to the React client, which renders dialogue and menus.

Top-level files
---------------
- web_app.py: Flask + Socket.IO server. Hosts one GameEngine per client session and forwards engine events to the frontend.
- README.md: Short project summary (updated).
- ATTRIBUTION.md: Licensing and content attributions.
- requirements.txt: External Python package dependencies (Flask, Flask-SocketIO, etc.).

Main package: `game/`
----------------------
Contains game logic modules and data-driven components.

Key modules
- engine.py: Event-driven web engine. Emits messages, menus, prompts, state, and combat updates that the server relays to the client.
- __main__.py: Legacy CLI entry point. The CLI has been retired and this module raises an ImportError; use the web server instead.
- entities.py: Data classes for Character, Monster, Weapons, Armor, Companion, MagicItem, and Room; tracks player state and inventory.
- combat.py: Combat helpers (AC computation, bonuses), shared with engine and CLI flows.
- dice.py: Dice parsing/rolling utilities (e.g., '3d6', '1d8').
- data_loader.py: JSON data loader and dialogue resolution helpers. Loads dialogues, monsters, weapons, armor, spells, potions, and sounds.
- labyrinth.py: Room generation and monster selection (supersedes legacy dungeon.py), chest logic, and random magic item selection.
- magic_items.py, traps.py, shop.py, town.py, save.py, companion.py, quests.py: Support modules implementing respective mechanics.

Data files (data/)
------------------
- monsters.json: Monster stat blocks and metadata (name, base_hp, base_ac, damage_die, xp, gold_range, wander_chance, difficulty).
- monsters_desc.json (new): Text descriptions for monsters shown when the player encounters them.
- monster_sounds.json: Short textual hints representing sounds a monster makes; used for the Listen mechanic.
- dialogues.json: Dialogue templates used widely across menus, town and game narration. Keys are namespace-centric (e.g., 'town', 'labyrinth').
- weapons.json, armors.json, magic_items.json, spells.json, potions.json: Game items and shop inventories.

How things connect (web)
------------------
1. The web UI (static/index.html) loads React + Socket.IO and connects to `web_app.py`.
2. On connect, the server creates a `GameEngine` for that socket session. The engine emits events (dialogue, menu, state, prompt, combat_update, pause), which the server forwards to the client.
3. The client renders typed dialogue, shows options as buttons, and sends back `player_action` events. Free-text inputs are handled via `game_prompt`.
4. Exploration occurs in `labyrinth.generate_room()` which returns `Room` objects containing a description, optional `Monster`, and possible chest contents.
5. Combat and town flows are implemented inside `engine.py` using pure functions and helpers from other modules.
6. Saving/loading uses `save.py` in CLI (legacy); web save is a future enhancement.

Extending the project
---------------------
- Add new monsters in `data/monsters.json` and add matching entries to `data/monster_sounds.json` and `data/monsters_desc.json`.
- Add new dialogues in `data/dialogues.json` under the appropriate namespace (town, labyrinth, system, combat, etc.).
- Add new items in `data/weapons.json`/`armors.json` or tweak prices and availability keys (use 'labyrinth' for items only found in the labyrinth).

Developer notes
---------------
- The web engine uses explicit pause/menu events; no stdout interception is required.
- `get_dialogue()` safely handles being called with non-Character objects (e.g., Monster dicts).
- The `tools/` folder contains assorted smoke tests and scripts. Some scripts target legacy CLI flows; prefer the engine-based tests.

Build and run
-------------
- Python deps: `pip install -r requirements.txt`
- Frontend build: `npm ci && npm run build` (compiles `static/app.jsx` â†’ `static/app.js`)
- Start server: `python web_app.py` then open http://127.0.0.1:5000/

Checks and tests
----------------
- Syntax/import check: `python tools/check_all.py`
- Dialogue coverage: `python tools/check_dialogue_references.py`
- Combat log tests: `python tools/test_log_strings.py`
- Shop/Town flows (smoke): `python tools/shop_flow_test.py`, `python tools/shop_purchase_sell_test.py`, `python tools/town_flow_test.py`

Contact
-------
- For feature requests, open an issue describing the desired change and expected behavior.
